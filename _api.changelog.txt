init
added api project
added tests project
added solution documents
	changelog: running log of modifications on project
	concept: general acceptance criteria and todo ideas
	troubleshooting: common troubleshooting techniques and tips
	structure: general folder structure
added common helper classes (notifications, healthchecks, etc)
could not get ilogger and swagger to play nice with core 3.0, reverted .api project to 2.2
added services for BLL logic
added robot and base class (audit columns) as dbset => botomatcontext
added robotType enum
added robot controller
began irobotservice
	any robot query/command must go through the irobotservice
i dont like the word Task as its amiguous with teh async/await word task so this app domain UL will use errand
added robotcontroller functionality to get, getmany, and delete
added errand entity
made fk on errand icanperformerrand to allow us to use non-robot types (perhaps cyborgs and what not)
added errand staty and type enums for value conversion and east of select generation
added a seed method but it kept failing. TODO: understand seed method failure, else cleanup and abandon
added robot and errand view models
modified irobotservice
added robotservice
Add-Migration InitialCreate -OutputDir "Data/Migrations" -Context BotOMatContext
Update-Database -Context BotOMatContext
added a refreshRobotCacheFilter on command requests
added simple validaiton to robot controller
consider extracting modelstate validation into a wrapper oof sorts: https://benfoster.io/blog/automatic-modelstate-validation-in-aspnet-mvc
general cleanup
added put action on robotcontroller to handle errands
modified errant to accept icanperformerrand
added ActorType to icanperformerrand to identify 'actor level type'
added erranservice to handle errand performance
issues with sqllite migrations (SQLite does not support this migration operation ('DropForeignKeyOperation') forced me to drop db and migrations and re init
	Add-Migration InitialContext -OutputDir "Data/Migrations" -Context BotOMatContext
	update-database -Context BotOMatContext
	I think id prefer a tpt schema but its not natively supported, so went with tph, ref: https://www.learnentityframeworkcore.com/inheritance/table-per-hierarchy
abandoned .web (razor component) project
created .spa (mvc + angular) to replace the .web project
TODO: considering how alike the robot and cybor services are, consiger a generic abstraction
added cyborg infrstructure
added leaderboard controller and infrastructure
added cors for ui requests
reapproached the seed and got that to work :)
Add-Migration InitWithSeed -Context BotOMatContext -OutputDir Data/Migrations
included Errands on actor getmany requests
Add-Migration killedby -Context botomatcontext
created battleservice
	makes inactive a random actor based on dice roll chance while an actor is performing an errand, this can include itself
actor services no longer have reference to the errandservice (circular was inevitable), that is done by the errand service
TODO: set navigation prop and fk constraint on killedBy
Add-Migration killedbySeed -Context botomatcontext
had to drop db again (DropForeignKeyOperation not supported by sqllite)
Add-Migration InitWithSeed -Context botomatcontext
Add-Migration NewSeed -Context botomatcontext
added errandactor to db context to enable typeless querying TODO: this allows us to refactor and make more flexible the services layer
api.modles sc correction models
added graveyard service
simplified keys for caching
2 means to create actors
	1 cta to create 1 via modal form
	2 slide 4 to create random number of actors
added images controller and mapped to actors in db
added missing next() on refreshfilters (was producing false positives with null responses)
added errand ctrl and service
added signalr for realtime messaging
added notifications in top most layer (prevent dependancy of signalr in services)
some minor cleanup
moved interfaces into their own folder but intentionally lef the original namespace
after consideration, i think its best to have explicit controller/methods for derived types than a single controller that works on the base type
	.net will serialize the derived type if returned from the action, but its not clear from the rest api swagger definitions
	it also forces some form of 'derived type checking' functionality that leans towards if trees, something id prefer to avoid
	ex: swagger will note ErrandActor and its props as the response, but if I return a Cyborg, the Cyborg.Gender will be included in the response
	explicit 'derived' controllers I think are best as its more symantic and obvious what the intent is, though it is a new controller per derived type
	inhertance and interface abstractions useful the deeper you are in a system, but impeding the higher your are
	with that mental not, I added abstractions for the deeper classes and kept the less abstract classes and functions in the higher layers
	if the controller per derived type gets too large, then its time to implement an abstract controller, but 2 types is not it for me